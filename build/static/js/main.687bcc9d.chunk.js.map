{"version":3,"sources":["Constants.js","BubblePlot.js","App.js","serviceWorker.js","index.js"],"names":["defaults","data","colormap","BubblePlot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderData","assertThisInitialized","margin","state","svgMargin","svgFullWidth","parseInt","svgWidth","svgFullHeight","svgHeight","svgChild","d3","range","remove","append","attr","left","right","top","bottom","colNames","parse","forEach","d","size","cs","contains","group","push","prevProps","console","log","setState","react_default","a","createElement","id","React","Component","App","updateViewportDimensions","windowInnerHeight","window","innerHeight","windowInnerWidth","innerWidth","contentParentHeight","parseFloat","height","width","toggleTab","tab","activeTab","toggleMenu","isMenuOpen","copySliderDataToApplicationData","applicationData","sliderData","isPaneOpen","Constants","_this2","Modal","setAppElement","el","setTimeout","addEventListener","removeEventListener","_this3","className","ref","Navbar","color","dark","expand","NavbarBrand","href","src","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","Button","document","activeElement","blur","tabs","NavLink","classnames","active","TabContent","TabPane","tabId","Row","Col","sm","style","contentHeight","zIndex","xs","src_BubblePlot","react_sliding_pane_default","title","onRequestClose","Form","FormGroup","Label","for","Input","type","name","value","onChange","e","target","defineProperty","FormText","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.687bcc9d.chunk.js","sourcesContent":["export const defaults = {\n  \"data\" : \"Allagash,25,1\\nDogfish,23,1\\nFlying Dog,22,1\\nFounders,21,1\\nStone,20,1\\nBells,19,1\\nVictory,18,1\\n21st Amendment,17,1\\nYards,16,1\\nLagunitas,15,1\\nBrooklyn,14,1\\nDuvel,13,1\\nRogue,12,1\\nFull Sail,11,1\\nLeft Hand,10,1\\nChevy,25,2\\nFord,23,2\\nDodge,22,2\\nBMW,21,2\\nMercedes,20,2\\nVW,19,2\\nPorsche,18,2\\nAudi,17,2\\nJeep,16,2\\nAcura,15,2\\nHonda,14,2\\nToyota,13,2\\nBugatti,12,2\\nFerrari,11,2\\nJaguar,10,2\",\n  \"colormap\" : \"nmf_16_component_colormap\"\n};\n\nexport const nmf_16_component_colormap = [\n  { \n    \"name\" : \"Tissue invariant\",\n    \"rgb\" : \"rgb(195,195,195)\",\n    \"hex\" : \"#C3C3C3\"\n  },\n  { \n    \"name\" : \"Fibroblast (1)\",\n    \"rgb\" : \"rgb(187,45,212)\",\n    \"hex\" : \"#BB2DD4\"\n  },\n  { \n    \"name\" : \"Embryonic\",\n    \"rgb\" : \"rgb(5,193,217)\",\n    \"hex\" : \"#05C1D9\"\n  },\n  { \n    \"name\" : \"Fibroblast (2)\",\n    \"rgb\" : \"rgb(122,0,255)\",\n    \"hex\" : \"#7A00FF\"\n  },\n  { \n    \"name\" : \"Lymphoid\",\n    \"rgb\" : \"rgb(254,129,2)\",\n    \"hex\" : \"#FE8102\"\n  },\n  { \n    \"name\" : \"Epithelial kidney cancer\",\n    \"rgb\" : \"rgb(74,104,118)\",\n    \"hex\" : \"#4A6876\"\n  },\n  { \n    \"name\" : \"Placenta\",\n    \"rgb\" : \"rgb(255,229,0)\",\n    \"hex\" : \"#FFE500\"\n  },\n  { \n    \"name\" : \"Neuronal\",\n    \"rgb\" : \"rgb(4,103,253)\",\n    \"hex\" : \"#0467FD\"\n  },\n  { \n    \"name\" : \"Cardiac\",\n    \"rgb\" : \"rgb(7,175,0)\",\n    \"hex\" : \"#07AF00\"\n  },\n  { \n    \"name\" : \"Fetal kidney\",\n    \"rgb\" : \"rgb(105,33,8)\",\n    \"hex\" : \"#692108\"\n  },\n  { \n    \"name\" : \"Musculoskeletal\",\n    \"rgb\" : \"rgb(76,125,20)\",\n    \"hex\" : \"#4C7D14\"\n  },\n  { \n    \"name\" : \"Digestive\",\n    \"rgb\" : \"rgb(0,149,136)\",\n    \"hex\" : \"#009588\"\n  },\n  { \n    \"name\" : \"Vascular endothelial\",\n    \"rgb\" : \"rgb(65,70,19)\",\n    \"hex\" : \"#414613\"\n  },\n  { \n    \"name\" : \"HSC myeloid erythroid\",\n    \"rgb\" : \"rgb(255,0,0)\",\n    \"hex\" : \"#FF0000\"\n  },\n  { \n    \"name\" : \"Epithelial\",\n    \"rgb\" : \"rgb(8,36,91)\",\n    \"hex\" : \"#08245B\"\n  }\n];","import React from 'react';\nimport * as d3 from 'd3';\n\nclass BubblePlot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data : this.props.data,\n      svgWidth : 600,\n      svgHeight : 600,\n      svgMargin : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    };\n  }\n  \n  componentDidUpdate(prevProps) {\n    //\n    // use equality tests to decide whether or not to redraw, to avoid infinite redraws\n    //\n    if (this.props.data !== prevProps.data) {\n      console.log(\"data changed\");\n      this.renderData();\n    }\n    else if ((this.props.svgWidth !== prevProps.svgWidth) || (this.props.svgHeight !== prevProps.svgHeight)) {\n      console.log(\"svgWidth or svgHeight changed\");\n      if (this.state.data) {\n        this.setState({ \n          svgWidth : this.props.svgWidth,\n          svgHeight : this.props.svgHeight\n        }, function() {\n          this.renderData();\n        });\n      }\n    }\n  }\n  \n  renderData = () => {\n    var self = this;\n    \n    // parameters\n    const margin = this.state.svgMargin;\n    const svgFullWidth = parseInt(this.state.svgWidth);\n    const svgFullHeight = parseInt(this.state.svgHeight);\n    const padding = 1.5; // separation between same-color nodes\n    const clusterPadding = 6; // separation between different-color nodes\n    const maxRadius = 12;\n    const color = d3.scaleOrdinal().range([\"#7A99AC\", \"#E4002B\"]);\n      \n    // cleanup\n    const svgChild = d3.select('svg');\n    if (svgChild) {\n      svgChild.remove();\n    }\n    \n    // begin\n    const svg = d3.select('#bubblePlot')\n      .append('svg')\n      .attr(\"width\", svgFullWidth + parseInt(margin.left) + parseInt(margin.right))\n      .attr(\"height\", svgFullHeight + parseInt(margin.top) + parseInt(margin.bottom))\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    \n    // demo\n    var colNames = \"text,size,group\\n\" + this.state.data;\n    var data = d3.csv.parse(colNames);\n    data.forEach(function(d) {\n      d.size = +d.size;\n    });\n\n    // unique cluster/group id's\n    var cs = [];\n    data.forEach(function(d){\n      if (!cs.contains(d.group)) {\n        cs.push(d.group);\n      }\n    });\n    \n  };\n  \n  render() {\n    console.log(\"render()\");\n    return (\n      <div id=\"bubblePlot\"></div>\n    )\n  }\n}\n\nexport default BubblePlot;","import React, { Component } from 'react';\n\n// Bootstrap 4\nimport { \n  TabContent, \n  TabPane, \n  Nav, \n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  NavItem, \n  NavLink, \n  Button,\n  Row, \n  Col,\n  Form, \n  FormGroup, \n  Label, \n  Input, \n  FormText } from 'reactstrap';\nimport classnames from 'classnames';\n\n// Sliding panel\nimport SlidingPane from 'react-sliding-pane';\nimport Modal from 'react-modal';\nimport 'react-sliding-pane/dist/react-sliding-pane.css';\n\n// Application constants\nimport * as Constants from './Constants.js';\n\n// Bubble plot\nimport BubblePlot from './BubblePlot';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: '1',\n      isMenuOpen: false,\n      isPaneOpen: false,\n      applicationData: Constants.defaults.data,\n      sliderData: Constants.defaults.data,\n      height: props.height, \n      width: props.width,\n      contentParentHeight: 0,\n    };\n  }\n  \n  componentDidMount() {\n    Modal.setAppElement(this.el);\n    setTimeout(() => { this.updateViewportDimensions(); }, 100);\n    window.addEventListener(\"resize\", this.updateViewportDimensions);\n  }\n  \n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateViewportDimensions);\n  }\n  \n  updateViewportDimensions = () => {\n    let windowInnerHeight = window.innerHeight + \"px\";\n    let windowInnerWidth = window.innerWidth + \"px\";\n    let contentParentHeight = parseInt(parseFloat(window.innerHeight) - 195) + \"px\";\n    this.setState({\n      height: windowInnerHeight,\n      width: windowInnerWidth,\n      contentParentHeight: contentParentHeight,\n    }, () => { \n      console.log(\"W x H\", this.state.width, this.state.height);\n      console.log(\"Content parent H\", this.state.contentParentHeight)\n    })\n  }\n  \n  toggleTab = (tab) => {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n  \n  toggleMenu = () => {\n    this.setState({\n      isMenuOpen: !this.state.isMenuOpen\n    });\n  }\n  \n  copySliderDataToApplicationData = () => {\n    this.setState({\n      applicationData: this.state.sliderData\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"application\" ref={ref => this.el = ref}>\n      \n        <div className=\"header\">\n      \n          <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand href=\"/\">\n              <img src=\"./logo-inverse.svg\" className=\"brand-content-logo\" alt=\"altius-logo\" href=\"https://www.altius.org\" /> Index NMF Summary\n            </NavbarBrand>\n            <NavbarToggler onClick={this.toggleMenu} />\n            <Collapse isOpen={this.state.isMenuOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <Button color=\"primary\" size=\"sm\" onClick={() => { this.setState({ isPaneOpen: true }); document.activeElement.blur(); }}>Data</Button>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        \n          <Nav tabs className=\"tab-nav\">\n            <NavItem>\n              <NavLink\n                className={classnames({ active: this.state.activeTab === '1' })}\n                onClick={() => { this.toggleTab('1'); }}\n              >\n                Genome-wide\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                className={classnames({ active: this.state.activeTab === '2' })}\n                onClick={() => { this.toggleTab('2'); }}\n              >\n                Chromosome\n              </NavLink>\n            </NavItem>\n          </Nav>\n          \n        </div>\n        \n        <TabContent activeTab={this.state.activeTab} className=\"tab-content\">\n          <TabPane tabId=\"1\">\n            <Row>\n              <Col sm=\"12\">\n                <h4>Index elements, by strongest NMF assignment (genome-wide)</h4>\n                <div className=\"svg-container\">\n                  <Row style={{\"height\":this.state.contentHeight, zIndex:\"-1000\"}}>\n                    <Col xs=\"10\" className=\"gw-left\">\n                      <BubblePlot\n                        data={this.state.applicationData}\n                        svgWidth={this.state.contentParentHeight}\n                        svgHeight={this.state.contentParentHeight} />\n                    </Col>\n                    <Col xs=\"2\" className=\"gw-right\">RIGHT</Col>\n                  </Row>\n                </div>\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Row>\n              <Col sm=\"12\">\n                <h4>Index elements, by strongest NMF assignment (per chromosome)</h4>\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n        \n        <SlidingPane\n          className='sliding-pane-custom'\n          isOpen={ this.state.isPaneOpen }\n          title='Data'\n          onRequestClose={() => { \n            this.setState({ \n              isPaneOpen: false \n            }, () => {\n              this.copySliderDataToApplicationData();\n            }); \n          }}>\n          <div>\n            <Form>\n              <FormGroup>\n                <Label for=\"applicationDataTextarea\">Application Data</Label>\n                <Input \n                  type=\"textarea\" \n                  name=\"sliderData\" \n                  id=\"applicationDataTextarea\" \n                  className=\"application-data-textarea\" \n                  value={this.state.sliderData}\n                  onChange={(e) => { \n                    let value = e.target.value;\n                    let name = e.target.name;\n                    this.setState({ [name] : value }); \n                  }}\n                  />\n                <FormText color=\"muted\">\n                  JSON-formatted object containing a breakdown of NMF set and subset membership\n                </FormText>\n              </FormGroup>\n              <Button \n                color=\"primary\" \n                size=\"sm\" \n                onClick={() => { \n                  this.setState({ \n                    isPaneOpen: false \n                  }, () => {\n                    this.copySliderDataToApplicationData();\n                  }); \n                  document.activeElement.blur(); \n                }}>Update</Button>\n            </Form>\n          </div>\n        </SlidingPane>\n            \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}